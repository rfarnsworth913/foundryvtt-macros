{
  "_id": "D9nOe8YqYiOgWQMB",
  "name": "Hunted Shot",
  "type": "script",
  "sort": 200000,
  "flags": {
    "exportSource": {
      "world": "intotheabyss",
      "system": "pf2e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.11.3.3582"
    },
    "macro-marker": {
      "activeData": {
        "icon": "systems/pf2e/icons/equipment/weapons/blowgun-dart.jpg",
        "tooltip": "Hunted Shot",
        "colour": "#ff0000",
        "trigger": ""
      }
    }
  },
  "scope": "global",
  "command": "//Created by u/Griff4218\n\n//------------------Functions begin------------------------\nlet toChat = (content, rollString) => {\n    let chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    }\n    ChatMessage.create(chatData, {})\n    if (rollString) {\n        let roll = new Roll(rollString).roll();\n        chatData = {\n            ...chatData,\n            flavor: \"Hunted Shot Damage\",\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            roll\n          }\n        ChatMessage.create(chatData, {})\n    }\n    \n}\n\nconst handleCrits = (roll) => roll === 1 ? -10 : (roll === 20 ? 10 : 0);\n\nlet RollAttacks = (args) => {\n\tlet {targetAC, bonus, name, weapon} = args;\n\t\n\tvar message = '';\n\tvar damage = '';\n\t\n\tconst roll1 = new Roll('d20').roll().total;\n\tconst roll2 = new Roll('d20').roll().total;\n\t\n\tconst crit1 = handleCrits(roll1)\n\tconst crit2 = handleCrits(roll2)\n\n\tif(map === \"\"){\n\t\tmap = 5;\n\n\t\tweapon.data.traits.value.forEach(element => {\n\t\t\tif(element === \"agile\"){\n\t\t\t\tmap = 4;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t//A lot of If statements to change messages displayed based on the results of each attack roll\n\tif(targetAC === 0){ //targetAC is set to 0 by default, if it stays 0 we assume that no target is selected and do not compare to any AC\n\t\tmessage = name + ' Rolls a ' + (roll1 + bonus);\n\t\t\tif(crit1 === 10){\n\t\t\t\tmessage += '[Natural 20]';\n\t\t\t}else if(crit1 === -10){\n\t\t\t\tmessage += '[Natural 1]';\n\t\t\t}else{\n\t\t\t\tmessage += \"[\" + roll1 + \"+\" + bonus + \"]\";\n\t\t\t}\t\n\t\tmessage += ' on their first attack and a ' + (roll2 + bonus - map);\n\t\t\tif(crit2 === 10){\n\t\t\t\tmessage += '[Natural 20]';\n\t\t\t}else if(crit2 === -10){\n\t\t\t\tmessage += '[Natural 1]';\n\t\t\t}else{\n\t\t\t\tmessage += \"[\" + roll2 + \"+\" + bonus + \"-\" + map + \"]\";\n\t\t\t}\n\t\tmessage += ' on their scond attack.';\n\t\tdamage += weaponDamage + \"+\" + weaponDamage;\n\t}else{\n\t\tif(roll1 + crit1 + bonus >= targetAC+10){//Different messages display on a Crit, Hit, and Miss for each attack, and the damage rolls are set accordingly\n\t\t\tmessage += (name + ' Crits on the First attack with a ' + (roll1 + bonus));\n\t\t\tdamage += weaponDamage+'*2';\n\t\t\tweaponTraits.forEach(element => {\n\t\t\t\tif(element.includes(\"deadly\")){\n\t\t\t\t\tvar deadly = element.split('-');\n\t\t\t\t\tdamage += \"+\" + deadlyDamage + deadly[1];\n\t\t\t\t}\n\t\t\t});\n\t\t}else if(roll1 + crit1 + bonus >= targetAC){\n\t\t\tmessage += (name + ' Hits on the First attack with a ' + (roll1 + bonus));\n\t\t\tdamage += weaponDamage;\n\t\t}else{\n\t\t\tmessage += (name + ' Misses the First attack with a ' + (roll1 + bonus));\n\t\t\tdamage += '0';\n\t\t}\n\t\tif(crit1 === 10){\n\t\t\tmessage += '[Natural 20]';\n\t\t}else if(crit1 === -10){\n\t\t\tmessage += '[Natural 1]';\n\t\t}else{\n\t\t\tmessage += \"[\" + roll1 + \"+\" + bonus + \"]\";\n\t\t}\t\n\t\t\n\t\tif(roll2 + crit2 + bonus - map >= targetAC+10){\n\t\t\tmessage += (' and Crits on the Second attack with a ' + (roll2 + bonus - map));\n\t\t\tdamage += '+'+weaponDamage+'*2';\n\t\t\tweaponTraits.forEach(element => {\n\t\t\t\tif(element.includes(\"deadly\")){\n\t\t\t\t\tvar deadly = element.split('-');\n\t\t\t\t\tdamage += \"+\" + deadlyDamage + deadly[1];\n\t\t\t\t}\n\t\t\t});\n\t\t}else if(roll2 + crit2 + bonus - map >= targetAC){\n\t\t\tmessage += (' and Hits on the Second attack with a ' + (roll2 + bonus - map));\n\t\t\tdamage += \"+\" + weaponDamage;\n\t\t}else{\n\t\t\tmessage += (' and Misses the Second attack with a ' + (roll2 + bonus - map));\n\t\t\tdamage += '+0';\n\t\t}\n\t\tif(crit2 === 10){\n\t\t\tmessage += '[Natural 20]';\n\t\t}else if(crit2 === -10){\n\t\t\tmessage += '[Natural 1]';\n\t\t}else{\n\t\t\tmessage += \"[\" + roll2 + \"+\" + bonus + \"-\" + map + \"]\";\n\t\t}\t\n\t}\n\t\n\t//display message and Rolls\n\ttoChat(message, damage);\n}\n\n//Determines if the Actor selected as the user has the requisite feat to use the ability, returns true if it does and false if it does not\nfunction CheckFeat() {\n\tvar items = token.actor.data.items;\n\tvar hasFeat = false;\n\n\tfor(var i = 0; i < items.length; i++){\n\t\tif(items[i].name === \"Hunted Shot\"){\n\t\t\t\thasFeat = true;\n\t\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tif(!hasFeat){\n\t\tui.notifications.error('This Creature does not have the Feat required to use this ability');\n\t\treturn false;\n\t}\n}\n\n//Creates and returns an array of all items that can be used for Hunted Shot (Ranged weapons with Reload 0)\nfunction GetEligableItems(inv){\n\tvar EligableItems = [];\n\tvar f = 0;\n\t\n\tfor(var i = 0; i < inv.length; i++){\n\t\t\n\t\tif(inv[i].data.range && inv[i].data.range.value > 10 && inv[i].data.reload && (inv[i].data.reload.value === \"\" || inv[i].data.reload.value === \"0\")){\n\t\t\tEligableItems[f] = inv[i];\n\t\t\tf++;\n\t\t}\n\t}\n\t\n\treturn EligableItems;\n}\n\n//Actually executes most of the script\n//In charge of Creating a dialouge for the user to select a weapon to use, setting attack variables to what they should be based on the selected weapon, and calling the RollAttacks function\n//Should probably clean up this entire function but eh\nfunction SelectWeapon(){\n\t\n\t//if there is more than 1 item that is viable to be used, create a dialouge for the user to select which one to use\n\tif(weapons.length > 1){\n\t\tvar options = '';\n\t\t\n\t\t//automatically propegates the selection menu for the dialouge with the available weapons\n\t\tfor(var i = 0; i < weapons.length; i++){\n\t\t\toptions += \"<option value='\" + i + \"'>\"+weapons[i].name+\"</option>\";\n\t\t}\n\t\t\n\t\t//Dialouge control\n\t\tlet applyChanges = false;\n\t\tnew Dialog({\n\t\t  title: \"Weapon Selection\",\n\t\t  content: `\n\t\t\t<div>Please select the weapon you are using for these attacks<div>\n\t\t\t<hr/>\n\t\t\t<form>\n\t\t\t  <div class=\"form-group\">\n\t\t\t\t<label for=\"List\">Weapon:</label>\n\t\t\t\t<select id=\"Weapon-List\" name=\"Weapon-List\">\n\t\t\t\t\t`+options+`\n\t\t\t\t</select>\n\t\t\t  </div>\n\t\t\t</form>\n\t\t\t`,\n\t\t  buttons: {\n\t\t\tyes: {\n\t\t\t  icon: \"<i class='fas fa-check'></i>\",\n\t\t\t  label: `Select Weapon`,\n\t\t\t  callback: () => applyChanges = true\n\t\t\t},\n\t\t\tno: {\n\t\t\t  icon: \"<i class='fas fa-times'></i>\",\n\t\t\t  label: `Cancel`\n\t\t\t},\n\t\t  },\n\t\t  default: \"yes\",\n\t\t  close: html => {\n\t\t\tif (applyChanges) {\n\t\t\t  for ( let token of canvas.tokens.controlled ) {\n\n\t\t\t\t//begin spaghetti code\n\t\t\t\t//set the selected weapon to that chosen by the dialouge\n\t\t\t\tvar sel = html.find('[name=\"Weapon-List\"]')[0].value || 0;\n\t\t\t\tvar selectedWeapon = weapons[sel];\n\n\t\t\t\tfor(var i = 0; i < selectedWeapon.data.traits.value.length; i++){\n\t\t\t\t\t\t\t\t\tweaponTraits[i] = selectedWeapon.data.traits.value[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t//set the number of dice for the attack roll equal to the number set in the items data sheet\n\t\t\t\tvar diceNumber = selectedWeapon.data.damage.dice;\n\t\t\t\tif(selectedWeapon.data.strikingRune.value != \"\"){\n\t\t\t\t\t//modify the number of dice based on the weapons striking rune\n\t\t\t\t\tswitch(selectedWeapon.data.strikingRune.value){\n\t\t\t\t\t\tcase \"striking\": diceNumber += 1; deadlyDamage = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"greaterStriking\": diceNumber += 2; deadlyDamage = 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"majorStriking\": diceNumber += 3; deadlyDamage = 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//set the weaponDamage string equal to the diceNumber plus the die size, format is \"XdY\" where X is the number of dice and Y is the size of the die such as d6\n\t\t\t\tweaponDamage = diceNumber + selectedWeapon.data.damage.die;\n\t\t\t\tweaponTraits.forEach(element => {\n\t\t\t\t\tif(element === \"propulsive\"){\n\t\t\t\t\t\tweaponDamage += \"+\";\n\t\t\t\t\t\tif(token.actor.data.data.abilities.str.mod > 0){\n\t\t\t\t\t\t\tweaponDamage += Math.ceil(token.actor.data.data.abilities.str.mod/2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t//set the Multiple Attack Penalty equal to that found on the weapons data sheet\n\t\t\t\tmap = selectedWeapon.data.MAP.value;\n\t\t\t\t//determines the weapons attack modifier\n\t\t\t\tAttackMod = 0;\n\t\t\t\tif(selectedWeapon.data.ability.value === \"dex\"){\n\t\t\t\t\tAttackMod += token.actor.data.data.abilities.dex.mod;\n\t\t\t\t}else{\n\t\t\t\t\tAttackMod += token.actor.data.data.abilities.str.mod;\n\t\t\t\t}\n\t\t\t\tif(selectedWeapon.data.weaponType.value === \"martial\"){//Note: if your character has a differnt prficiency in specific weapon groups (like a fighter would) this script will not accurately calculate your proficiency\n\t\t\t\t\tAttackMod += token.actor.data.data.martial.martial.value;\n\t\t\t\t}else{\n\t\t\t\t\tAttackMod += token.actor.data.data.martial.simple.value;\n\t\t\t\t}\n\t\t\t\tif(selectedWeapon.data.potencyRune.value != \"\"){\n\t\t\t\t\tAttackMod += parseInt(selectedWeapon.data.potencyRune.value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(var i = 0; i < selectedWeapon.data.traits.value.length; i++){\n\t\t\t\t\tweaponTraits[i] = selectedWeapon.data.traits.value[i];\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif(targetSelected){\n\t\t\t\t\ttargetAC = target.data.attributes.ac.value;\n\t\t\t\t}\n\t\t\t\tconsole.log(selectedWeapon)\n\t\t\t\tRollAttacks({targetAC: targetAC, bonus: AttackMod, name: token.actor.data.name, weapon: selectedWeapon});\n\n\t\t\t  }\n\t\t\t}\n\t\t  }\n\t\t}).render(true);\n\t}else{\n\n\t\t//same as the similar above section should probably make this a function\n\t\tvar selectedWeapon = weapons[0];\n\n\t\tvar diceNumber = selectedWeapon.data.damage.dice;\n\t\tif(selectedWeapon.data.strikingRune.value != \"\"){\n\n\t\t\tswitch(selectedWeapon.data.strikingRune.value){\n\t\t\t\tcase \"striking\": diceNumber += 1; \n\t\t\t\t\tbreak;\n\t\t\t\tcase \"greaterStriking\": diceNumber += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"majorStriking\": diceNumber += 3; \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tweaponDamage = diceNumber + selectedWeapon.data.damage.die;\n\t\tmap = selectedWeapon.data.MAP.value;\n\t\tAttackMod = 0;\n\t\tif(selectedWeapon.data.ability.value === \"dex\"){\n\t\t\tAttackMod += token.actor.data.data.abilities.dex.mod;\n\t\t}else{\n\t\t\tAttackMod += token.actor.data.data.abilities.str.mod;\n\t\t}\n\t\tif(selectedWeapon.data.weaponType.value === \"martial\"){//Note: if your character has a differnt prficiency in specific weapon groups (like a fighter would) this script will not accurately calculate your proficiency\n\t\t\tAttackMod += token.actor.data.data.martial.martial.value;\n\t\t}else{\n\t\t\tAttackMod += token.actor.data.data.martial.simple.value;\n\t\t}\n\t\tif(selectedWeapon.data.potencyRune.value != \"\"){\n\t\t\tAttackMod += parseInt(selectedWeapon.data.potencyRune.value);\n\t\t}\n\t\t\t\t\n\t\tif(targetSelected){\n\t\t\ttargetAC = target.data.attributes.ac.value;\n\t\t}\n\t\tconsole.log(selectedWeapon)\n\t\t//Check if the user has the feat\n\t\tRollAttacks({targetAC: targetAC, bonus: AttackMod, name: token.actor.data.name, weapon: selectedWeapon});\n\t}\n}\n//-----------------Functions End----------------\n\n//if no token is selected, show an error\nif(!token){\n\tui.notifications.error(\"No token selected, please select the token that will use this ability\");\n}else{\n\t\n\t//Variable Declaration\n\tvar weaponDamage = '1d4'\n\tvar map = 5\n\tvar AttackMod = 0\n\tvar weaponTraits = [];\n\tvar deadlyDamage = 1;\n\t\n\tvar targetAC = 0;\n\t\n\tvar targetSelected = false;\n\tvar targetArray = Array.from(game.user.targets);\n\t\n\t//if no target selected show a info notification\n\tif(targetArray[0]){\n\t\tvar target = targetArray[0].actor.data;\n\t\ttargetSelected = true;\n\t}else{\n\t\tui.notifications.info(\"Tip: You can target another creature to automatically compare your attacks to its AC\");\n\t}\n\n\tvar weapons = GetEligableItems(token.actor.data.items);\n\t//check if the actor has any weapons that meet the requirements\n\tif(weapons[0]){\n\t\tif(CheckFeat()){\n\t\t\tSelectWeapon();\n\t\t}\n\t}else{\n\t\tui.notifications.error(\"This actor has no weapons which meet the requirements for this ability\");\n\t}\n}",
  "author": "2cJoYGbKQjIlZn7z",
  "img": "systems/pf2e/icons/equipment/weapons/blowgun-dart.jpg",
  "actorIds": []
}