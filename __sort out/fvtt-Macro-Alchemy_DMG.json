{
  "_id": "k8uh75ex5iO0JKfN",
  "name": "Alchemy DMG",
  "type": "script",
  "sort": 100001,
  "flags": {
    "macro-marker": {
      "activeData": {
        "icon": "icons/svg/dice-target.svg",
        "tooltip": "New Macro",
        "colour": "#ff0000",
        "trigger": ""
      }
    },
    "exportSource": {
      "world": "intotheabyss",
      "system": "pf2e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.11.3.3582"
    }
  },
  "scope": "global",
  "command": "let rollBombDmg = (bomb, dmgRollType, stickyBombUsed, isCritical) => {\n  let bonuses = {\n  }\n  let rollString;\n  let chatMsg;\n  if (isCritical) chatMsg = `<b>Critical Damage Roll: ${bomb.name}</b>`;\n  else chatMsg = `<b> Damage Roll: ${bomb.name}</b>`;\n  chatMsg = `${chatMsg}\n    <div>\n      <span style = \"white-space:nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; color: white; background:var(--secondary);\">\n        ${bomb.type}\n      </span>\n      <span style = \"white-space:nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; color: white; background: rgba(0, 0, 0, 0.45);\">\n        ${dmgRollType}\n      </span>\n    `;\n\n  let optainedFeats = checkFeats();\n\n  switch (dmgRollType) {\n    case 'Base':\n      rollString = bomb.base;\n      if(bomb.condition){\n        chatMsg = `\n          ${chatMsg}\n          <span style = \"white-space:nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; color: white; background: rgba(0, 0, 0, 0.25);\">\n            ${bomb.condition}\n          </span>\n          </div>\n        `;\n      } else {chatMsg = `${chatMsg} </div>`};\n      break;\n\n    case 'Persistent':\n      // Check for Alchemist Feat Sticky Bomb and if prerequisites are met (Quick Alchemy used and bomb level is atleast 2 lower than alchemy level)\n      if (optainedFeats.includes('Sticky Bomb') && stickyBombUsed){\n        let stickydmg = bomb.splash;\n        // check for Alchemist Feat \"Calculated Splash\"\n        if (optainedFeats.includes('Calculated Splash')) {\n          // Splash damage of bombs equals int modifier\n          stickydmg = `${actor.data.data.abilities.int.mod}`;\n          if (optainedFeats.includes('Expanded Splash')) stickydmg = parseInt(bomb.splash) + actor.data.data.abilities.int.mod;\n        }\n        bonuses = {...bonuses, sticky: stickydmg};\n        rollString = `${bomb.persistent} + @sticky`;\n        chatMsg = `\n          ${chatMsg}\n          <span style = \"white-space:nowrap; margin: 0 2px 2px 0; padding: 0 3px; font-size: 10px; line-height: 16px; border: 1px solid #999; border-radius: 3px; color: white; background: rgba(0, 0, 0, 0.25);\">\n            Sticky\n          </span>\n          </div>\n        `;\n      } else {\n        rollString = bomb.persistent;\n        chatMsg = `${chatMsg} </div>`;\n      }\n      if (stickyBombUsed && !optainedFeats.includes('Sticky Bomb')) ui.notifications.warn('You don\\'t have the Feat \"Sticky Bomb\"!');\n      break;\n\n    case 'Splash':\n      // check for Alchemist Feat \"Calculated Splash\"\n      if (optainedFeats.includes('Calculated Splash')) {\n        // Splash damage of bombs equals int modifier\n        rollString = `${actor.data.data.abilities.int.mod}`;\n        //rollString = '6';\n        if (optainedFeats.includes('Expanded Splash')){\n          let splashdmg = parseInt(bomb.splash) + actor.data.data.abilities.int.mod\n          rollString = `${splashdmg}`;\n        }\n      } else {\n        rollString = bomb.splash;\n      }\n      chatMsg = `${chatMsg} </div>`;\n      break;\n    default:\n  }\n\n  // Goblin Feat \"Burn It!\"\n  if (bomb.type === 'Fire' && optainedFeats.includes('Burn It!')) {\n    // + floor(itemlvl/4) to all damage types\n    let damageBonus = Math.max(Math.floor(bomb.level/4), 1);\n    if (!bonuses.status) {\n      bonuses = {...bonuses, status: damageBonus};\n      rollString = rollString + ' + @status';\n    } else if (bonuses.status < damageBonus) {\n      bonuses.status = damageBonus;\n    }\n  }\n\n\n  // simulate the roll with all aplicable boni\n\n\n  if(isCritical && (dmgRollType === 'Base' || dmgRollType === 'Persistent')){\n    rollString = `${rollString} + ${rollString}`;\n  }\n  let roll = new Roll(rollString, bonuses);\n  roll.roll();\n\n  let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    flavor: chatMsg,\n    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n    roll,\n  };\n  ChatMessage.create(chatData, {});\n\n}\n\nlet checkFeats = () => {\n  // look up, if the character has specific feats\n  let featsToLookUp = ['Burn It!', 'Calculated Splash', 'Expanded Splash', 'Sticky Bomb'];\n  let optainedFeats = [];\n\n  // checks for every item in featsToLookUp if the selected Actor has this feat and if so, pushes the item to optainedFeats\n  featsToLookUp.forEach(\n    (item, index) => {\n      if (actor.items.find(i => i.name === item) != null) {\n        optainedFeats.push(item);\n      }\n    }\n  );\n  return optainedFeats;\n}\n\nlet getBombInfo = (selectedBomb, selectedQuality) => {\n  // default values for bombs.\n  let bombName;\n  let bombPersistent, bombSplashDmg, bombBaseDmg, dmgType;\n  let condition, level;\n\n  if (selectedQuality) bombName = `${selectedBomb} (${selectedQuality})`;\n  else bombName = `${selectedBomb}`;\n\n  // sets the default item level depending on the quality of the bomb\n  // lesser = 1, moderate = 3, greater = 11, major = 17\n  // bombs that differ from these values need those values set in the cases\n  switch (selectedQuality) {\n    case 'Lesser':\n      level = 1;\n      break;\n    case 'Moderate':\n      level = 3;\n      break;\n    case 'Greater':\n      level = 11;\n      break;\n    case 'Major':\n      level = 17;\n      break;\n    default:\n  }\n\n  // change the vars according to the selected bomb\n  // template for new bomb:\n  // case 'bombName':\n  //  switch (selectedQuality) {\n  //    case 'Lesser':\n  //    break;\n  //    case 'Moderate':\n  //    break;\n  //    case 'Greater':\n  //    break;\n  //    case 'Major':\n  //    break;\n  //    default:\n  //  }\n  // break;\n  switch (selectedBomb) {\n    // Acid Flask\n    case 'Acid Flask':\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombPersistent = '1d6';\n          bombSplashDmg = '1';\n        break;\n        case 'Moderate':\n          bombPersistent = '2d6';\n          bombSplashDmg = '2';\n        break;\n        case 'Greater':\n          bombPersistent = '3d6';\n          bombSplashDmg = '3';\n        break;\n        case 'Major':\n          bombPersistent = '4d6';\n          bombSplashDmg = '4';\n        break;\n        default:\n          bombPersistent = '1d6';\n          bombSplashDmg = '1';\n      }\n      // Bomb traits independent of quality\n      bombBaseDmg = '1';\n      dmgType = 'Acid';\n    break;\n\n    // Alchemist's Fire\n    case \"Alchemist\\'s Fire\":\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombPersistent = '1';\n          bombBaseDmg = '1d8';\n          bombSplashDmg = '1';\n        break;\n        case 'Moderate':\n          bombPersistent = '2';\n          bombBaseDmg = '2d8';\n          bombSplashDmg = '2';\n        break;\n        case 'Greater':\n          bombPersistent = '3';\n          bombBaseDmg = '3d8';\n          bombSplashDmg = '3';\n        break;\n        case 'Major':\n          bombPersistent = '4';\n          bombBaseDmg = '4d8';\n          bombSplashDmg = '4';\n        break;\n        default:\n          bombPersistent = '1';\n          bombBaseDmg = '1d8';\n          bombSplashDmg = '1';\n      }\n      // Bomb traits independent of quality\n      dmgType = 'Fire';\n    break;\n\n    // Bottled Lightning\n    case \"Bottled Lightning\":\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n        break;\n        case 'Moderate':\n          bombBaseDmg = '2d6';\n          bombSplashDmg = '2';\n        break;\n        case 'Greater':\n          bombBaseDmg = '3d6';\n          bombSplashDmg = '3';\n        break;\n        case 'Major':\n          bombBaseDmg = '4d6';\n          bombSplashDmg = '4';\n        break;\n        default:\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n      }\n      // Bomb traits independent of quality\n      dmgType = 'Electricity';\n      condition = 'flat-footed';\n    break;\n\n    // Blight Bomb\n    case \"Blight Bomb\":\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombPersistent = '1d4';\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n        break;\n        case 'Moderate':\n          bombPersistent = '2d4';\n          bombBaseDmg = '2d6';\n          bombSplashDmg = '2';\n        break;\n        case 'Greater':\n          bombPersistent = '3d4';\n          bombBaseDmg = '3d6';\n          bombSplashDmg = '3';\n        break;\n        case 'Major':\n          bombPersistent = '4d4';\n          bombBaseDmg = '4d6';\n          bombSplashDmg = '4';\n        break;\n        default:\n          bombPersistent = '1d4';\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n      }\n      // Bomb traits independent of quality\n      dmgType = 'Poison'\n    break;\n\n    // Dread Ampoule\n    case 'Dread Ampoule':\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n        break;\n        case 'Moderate':\n          bombBaseDmg = '2d6';\n          bombSplashDmg = '2';\n        break;\n        case 'Greater':\n          bombBaseDmg = '3d6';\n          bombSplashDmg = '3';\n        break;\n        case 'Major':\n          bombBaseDmg = '4d6';\n          bombSplashDmg = '4';\n        break;\n        default:\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n      }\n      // Bomb traits independent of quality\n      condition = 'frightened 1';\n      dmgType = 'Mental';\n    break;\n\n    // Frost Vial\n    case 'Frost Vial':\n      switch (selectedQuality) {\n        case 'Lesser':\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n          condition = '-5ft Speed';\n        break;\n        case 'Moderate':\n          bombBaseDmg = '2d6';\n          bombSplashDmg = '2';\n          condition = '-10ft Speed';\n        break;\n        case 'Greater':\n          bombBaseDmg = '3d6';\n          bombSplashDmg = '3';\n          condition = '-10ft Speed';\n        break;\n        case 'Major':\n          bombBaseDmg = '4d6';\n          bombSplashDmg = '4';\n          condition = '-15ft Speed';\n        break;\n        default:\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n          condition = '-5ft Speed';\n      }\n      // Bomb traits independent of quality\n      dmgType = 'Cold';\n     break;\n\n     // Ghost Charge\n     case 'Ghost Charge':\n      switch (selectedQuality) {\n         case 'Lesser':\n          bombBaseDmg = '1d8';\n          bombSplashDmg = '1';\n          condition = 'enfeebled 1';\n         break;\n         case 'Moderate':\n          bombBaseDmg = '2d8';\n          bombSplashDmg = '2';\n          condition = 'enfeebled 1';\n         break;\n         case 'Greater':\n          bombBaseDmg = '3d8';\n          bombSplashDmg = '3';\n          condition = 'enfeebled 2';\n         break;\n         case 'Major':\n          bombBaseDmg = '4d8';\n          bombSplashDmg = '4';\n          condition = 'enfeebled 2';\n         break;\n         default:\n          bombBaseDmg = '1d8';\n          bombSplashDmg = '1';\n          condition = 'enfeebled 1';\n       }\n     // Bomb traits independent of quality\n     dmgType = 'Positive';\n     break;\n\n     // Peshpine Grenade\n     case 'Peshpine Grenade':\n      switch (selectedQuality) {\n       case 'Lesser':\n        bombBaseDmg = '1d6';\n        bombSplashDmg = '1';\n        condition = 'stupefied 1';\n       break;\n       case 'Moderate':\n        bombBaseDmg = '2d6';\n        bombSplashDmg = '2';\n        condition = 'stupefied 1';\n       break;\n       case 'Greater':\n        bombBaseDmg = '3d6';\n        bombSplashDmg = '3';\n        condition = 'stupefied 2';\n       break;\n       case 'Major':\n        bombBaseDmg = '4d6';\n        bombSplashDmg = '4';\n        condition = 'stupefied 3';\n       break;\n       default:\n        bombBaseDmg = '1d6';\n        bombSplashDmg = '1';\n        condition = 'stupefied 1';\n      }\n      //  Bomb traits independent of quality\n      dmgType = 'Piercing';\n     break;\n\n     // Tanglefoot Bag\n     // Tanglefoot Bag is unique in that it doesn't deal any damage.\n     // For now that is aquired by rolling 0 dmg\n     case 'Tanglefoot Bag':\n      switch (selectedQuality) {\n        case 'Lesser':\n          condition = '-10ft Speed';\n        break;\n        case 'Moderate':\n          condition = '-15ft Speed';\n        break;\n        case 'Greater':\n          condition = '-15ft Speed';\n        break;\n        case 'Major':\n          condition = '-20ft Speed';\n        break;\n        default:\n          condition = '-10ft Speed';\n      }\n      // Bomb traits independent of quality\n      // on crit: immobilized 1\n      bombBaseDmg = '0';\n     break;\n\n     // Thunderstone\n     case 'Thunderstone':\n       switch (selectedQuality) {\n         case 'Lesser':\n          bombBaseDmg = '1d4';\n          bombSplashDmg = '1';\n          condition = 'Fort DC 17';\n         break;\n         case 'Moderate':\n          bombBaseDmg = '2d4';\n          bombSplashDmg = '2';\n          condition = 'Fort DC 20';\n         break;\n         case 'Greater':\n          bombBaseDmg = '3d4';\n          bombSplashDmg = '3';\n          condition = 'Fort DC 28';\n         break;\n         case 'Major':\n          bombBaseDmg = '4d4';\n          bombSplashDmg = '4';\n          condition = 'Fort DC 38';\n         break;\n         default:\n          bombBaseDmg = '1d4';\n          bombSplashDmg = '1';\n          condition = 'Fort DC 17';\n      }\n    // Bomb traits independent of quality\n     condition = `${condition}: deafened`;\n     dmgType = 'Sonic';\n     break;\n\n     // Dwarven Daisy\n     case 'Dwarven Daisy':\n       switch (selectedQuality) {\n        case 'Lesser':\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n          condition = 'Fort DC 16';\n        break;\n        case 'Moderate':\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n          condition = 'Fort DC 16';\n        break;\n        default:\n          bombBaseDmg = '1d6';\n          bombSplashDmg = '1';\n          condition = 'Fort DC 16';\n          ui.notifications.warn('The selected Bomb isn\\'t avaiable in the selected Quality. Assuming Lesser!');\n      }\n     // Bomb traits independent of quality\n     dmgType = 'Fire';\n     condition = `${condition}: dazzled 1`;\n     break;\n\n     // Crystal Shards\n     case 'Crystal Shards':\n       switch (selectedQuality) {\n        case 'Moderate':\n          bombBaseDmg = '2d4';\n          bombSplashDmg = '4';\n          level = 4;\n        break;\n        case 'Greater':\n          bombBaseDmg = '3d4';\n          bombSplashDmg = '5';\n          level = 12;\n        break;\n        case 'Major':\n          bombBaseDmg = '4d4';\n          bombSplashDmg = '6';\n          level = 18;\n        break;\n        default:\n          bombBaseDmg = '2d4';\n          bombSplashDmg = '4';\n          level = 4;\n          ui.notifications.warn('The selected Bomb isn\\'t avaiable in the selected Quality. Assuming Moderate!');\n      }\n     // Bomb traits independent of quality\n     condition = 'caltrops';\n     dmgType = 'Piercing'\n     break;\n\n    default:\n    break;\n  }\n\n  // only persistent and condition should be left undefined\n  return {\n    name: bombName,\n    base: bombBaseDmg,\n    splash: bombSplashDmg,\n    type: dmgType,\n    persistent: bombPersistent,\n    condition: condition,\n    level: level,\n  };\n}\n\nlet applyChanges = false;\nlet rollAll = false;\nif (actor) {\n  if(actor.data.type === 'character') {\n\n    new Dialog({\n      title: `Alchemical Bombs`,\n      content: `\n        <div>\n          Select a Bomb and a Quality.\n          </br></br>\n          For Bombs that dont have different qualities only select the bomb.\n        </div>\n        <hr/>\n        <form>\n          <div class=\"form-group\">\n            <label>Bomb :</label>\n            <select name=\"bomb-used\" id=\"bomb-used\">\n              <option value=\"default\"> Select a Bomb </option>\n              <option value= full> Acid Flask </option>\n              <option value= full> Alchemist\\'s Fire </option>\n              <option value= full> Blight Bomb </option>\n              <option value= full> Bottled Lightning </option>\n              <option value= no-lesser> Crystal Shards </option>\n              <option value= full> Dread Ampoule </option>\n              <option value= full> Frost Vial </option>\n              <option value= full> Ghost Charge </option>\n              <option value= full> Peshpine Grenade </option>\n              <option value= full> Tanglefoot Bag </option>\n              <option value= full> Thunderstone </option>\n              <option value= lesser-moderate> Dwarven Daisy </option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label>Quality :</label>\n            <select name=\"bomb-quality\" id=\"bomb-quality\">\n              <option value = \"default\"> Select a Quality </option>\n              <option value = \"lesser\" class = \"full lesser-moderate\"> Lesser </option>\n              <option value = \"moderate\" class = \"full no-lesser lesser-moderate\"> Moderate </option>\n              <option value = \"greater\" class = \"full no-lesser\"> Greater </option>\n              <option value = \"major\" class = \"full no-lesser\"> Major </option>\n            </select>\n          </div>\n          <div class = \"form-group\">\n            <label> Critical Hit: </label>\n            <input type=\"checkbox\" id=\"critical\" name=\"critical\" value=\"isCritical\">\n          </div>\n          <div class = \"form-group\">\n            <label> Sticky Bomb: </label>\n            <input type=\"checkbox\" id=\"stickyBomb\" name=\"stickyBomb\" value=\"stickyBombUsed\">\n          </div>\n        </form>\n        <hr/>\n        <script>\n        // change the content of the second select according to the selected Bomb\n        var fruit = $(\"[name=bomb-quality] option\").detach()\n        $(\"[name=bomb-used]\").change(function() {\n          var val = $(this).val()\n          $(\"[name=bomb-quality] option\").detach()\n          fruit.filter(\".\" + val).clone().appendTo(\"[name=bomb-quality]\")\n        }).change()\n        </script>\n      `,\n      //buttoms\n      buttons: {\n        yes: {\n          //icon: \"<i class='fas fa-check'></i>\",\n          label: `Roll Damage`,\n          callback: () => {applyChanges = true; rollAll = true},\n        },\n        maybe: {\n          //icon: \"<i class='fas fa-times'></i>\",\n          label: `Roll Persistent`,\n          callback: () => applyChanges = true\n        },\n        no: {\n          //icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel`,\n          callback: () => applyChanges = false\n        },\n      },\n      default: \"no\",\n      // what happens when you close the dialog\n      close: html => {\n        if (applyChanges) {\n          //for ( let token of canvas.tokens.controlled ) {\n            //let selectedBomb = html.find('[name=\"bomb-used\"]')[0].value || \"none\";\n            let selectedBombIndex = html.find('[name=\"bomb-used\"]')[0].options.selectedIndex;\n            let bombName = html.find('[name=\"bomb-used\"]')[0][selectedBombIndex].label || \"none\";\n\n\n\n            //let selectedQuality = html.find('[name=\"bomb-quality\"]')[0].value || \"none\";\n            let selectedQualityIndex = html.find('[name=\"bomb-quality\"]')[0].options.selectedIndex;\n            var bombQuality = html.find('[name=\"bomb-quality\"]')[0][selectedQualityIndex].label || \"none\";\n\n            let bomb = getBombInfo(bombName, bombQuality);\n\n          //}\n\n\n\n          // roll all three types of dmg and output it to chat\n          if (rollAll) {\n            // base damage\n            rollBombDmg(bomb, 'Base', stickyBomb.checked, critical.checked);\n            // splash damage\n            if (bomb.splash) rollBombDmg(bomb, 'Splash', stickyBomb.checked, critical.checked);\n            // persistent damage, if aplicable\n            if (bomb.persistent) rollBombDmg(bomb, 'Persistent', stickyBomb.checked, critical.checked);\n            else if (stickyBomb.checked) {\n              bomb.persistent = '0';\n              rollBombDmg(bomb, 'Persistent', stickyBomb.checked, critical.checked);\n            }\n          // only roll the persistent dmg and output it to chat\n          } else if (bomb.persistent){\n            rollBombDmg(bomb, 'Persistent', stickyBomb.checked, critical.checked);\n          } else ui.notifications.warn('Select a Bomb that deals persistent damage!');\n\n        }\n      }\n    }).render(true);\n  } else if (actor.data.type !== 'character') ui.notifications.warn(\"You must select a playable character!\");\n} else ui.notifications.warn(\"You must select a playable character!\");;",
  "author": "W8q1Lt1rpRQHzfmu",
  "img": "https://assets.forge-vtt.com/5f8e239e1eb9e69365fbf252/Other%20Games/anton-a-ref5.jpg?optimizer=disabled",
  "actorIds": []
}