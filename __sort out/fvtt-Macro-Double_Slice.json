{
  "_id": "7NXcKPRlkn0rrWmQ",
  "name": "Double Slice",
  "type": "script",
  "sort": 100001,
  "flags": {
    "macro-marker": {
      "activeData": {
        "icon": "icons/svg/dice-target.svg",
        "tooltip": "New Macro",
        "colour": "#ff0000",
        "trigger": ""
      }
    },
    "furnace": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "intotheabyss",
      "system": "pf2e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.11.3.3582"
    }
  },
  "scope": "global",
  "command": "//Created by Drental, based on a macro by u/Griff4218 \n\n// ------------------ damage output ------------------\n\nconst handleCrits = (roll) => roll.terms[0].results[0] === 1 ? -1 : (roll.terms[0].results[0] === 20 ? 1 : 0);\n\nconst DoubleSliceDamage = (roll, strike, dos, targetAC) => {\n    const crit = handleCrits(roll);\n    var success = 1;\n\n    if (roll._total >= targetAC + 10) {\n        success = 3;\n    } else if (roll._total >= targetAC) {\n        success = 2;\n    } else if (roll._total <= targetAC - 10) {\n        success = 0;\n    }\n    dos.value =Math.max(3,Math.min(success+crit,0));\n    if(dos.value === 2) {\n        strike.damage({event: event});\n    }\n    if(dos.value === 3) {\n        strike.critical({event: event});\n    }\n}\n\n// ------------------ hit calculation ------------------\nfunction DoubleSliceStrike(weapon1, weapon2) {\n    let targetAC = 0;\n    var strike1 = actor.data.data.actions.find(a => a.type === 'strike' && a.item === weapon1._id);\n    var strike2 = actor.data.data.actions.find(a => a.type === 'strike' && a.item === weapon2._id);\n    if(targetSelected) {\n        targetAC = target.data.attributes.ac.value;\n    }\n    var useAgile = (strike1.traits.find(i => i.name === 'agile') || strike2.traits.find(i => i.name === 'agile'));\n\n    var options = actor.getRollOptions(['all','attack']);\n\n    const dc = {value: targetAC};\n\n    var dosFirst = {value: 0};\n    var dosSecond = {value: 0};\n\n    if (useAgile) {\n        if (targetSelected) {\n            strike1.attack({event: event, options: options, callback: (roll) => {DoubleSliceDamage(roll, strike1, dosFirst, targetAC)}});\n            strike2.attack({event: event, options: options, callback: (roll) => {DoubleSliceDamage(roll, strike2, dosSecond, targetAC)}});\n        } else {\n            strike1.attack({event: event, options: options});\n            strike2.attack({event: event, options: options});\n        }\n    } else {\n        (async () => {\n            if (targetSelected) {\n                strike1.attack({event: event, options: options, callback: (roll) => {DoubleSliceDamage(roll, strike1, dosFirst, targetAC)}});\n            } else {\n                strike1.attack({event: event, options: options});\n            }\n            await actor.addCustomModifier(\n                \"attack\",\n                \"Double Slice\",\n                -2,\n                \"untyped\"\n            );\n            // get a new strike with the modifier\n            if (targetSelected) {\n                actor.data.data.actions.find(a => a.type === 'strike' && a.item === weapon2._id)\n                    .attack({event: event, options: options, callback: (roll) => {DoubleSliceDamage(roll, strike2, dosSecond, targetAC)}});\n            } else {\n                actor.data.data.actions.find(a => a.type === 'strike' && a.item === weapon2._id)\n                    .attack({event: event, options: options});\n            }\n            await actor.removeCustomModifier(\n                \"attack\",\n                \"Double Slice\"\n            );\n\n            // apply special feats\n            if(CheckFeat('dual-onslaught', false)) {\n                if (Math.max(dosFirst.value, dosSecond.value) === 1) {\n                    let content = 'Dual Onslaught Damage'\n                    let chatData = {\n                        user: game.user.id,\n                        content,\n                        speaker: ChatMessage.getSpeaker(),\n                    }\n                    ChatMessage.create(chatData, {})\n                    strike1.damage({event: event})\n                }\n\n            }\n            if(CheckFeat('flensing-slice', false)) {\n                if (dosFirst.value > 1 && dosSecond.value > 1) {\n                    let content = 'Flensing Slice available'\n                    let chatData = {\n                        user: game.user.id,\n                        content,\n                        speaker: ChatMessage.getSpeaker(),\n                    }\n                    ChatMessage.create(chatData, {})\n                }\n            }\n        })();\n    }\n}\n\n// ------------------ sanity check ------------------\nconst DoubleSliceCheck = ($html) => {\n    var sel1 = parseInt($html.find('[name=\"Weapon-ListA\"]')[0].value) || 0;\n    var sel2 = parseInt($html.find('[name=\"Weapon-ListB\"]')[0].value) || 0;\n    if (sel1 !== sel2) {\n        DoubleSliceStrike(weapons[sel1], weapons[sel2]);\n    }\n}\n\n// ------------------ dialog function ------------------\n\n//Query all user choices\n//In charge of creating a dialog for the user to select the weapons to use\nfunction DoubleSliceUI() {\n    //if there is more than 2 item that is viable to be used, create a dialouge for the user to select which ones to use\n    if(weapons.length > 2){\n        var options = '';\n        \n        // create selection entries for weapon selection\n        weapons.forEach((value,key,map) => {\n            options += \"<option value='\" + key + \"'>\" + value.name + \"</option>\";\n        });\n        \n        //Dialouge control\n        let applyChanges = false;\n        const dialogEditor = new Dialog({\n            title: \"Weapon Selection\",\n            content: `\n                <div>Please select the weapons you are using for these attacks<div>\n                <hr/>\n                <form>\n                <div class=\"form-group\">\n                    <label for=\"List\">Mainhand Weapon:</label>\n                    <select id=\"Weapon-ListA\" name=\"Weapon-ListA\">\n                        ${options}\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"List\">Offhand Weapon:</label>\n                    <select id=\"Weapon-ListB\" name=\"Weapon-ListB\">\n                        ${options}\n                    </select>\n                </div>\n                </form>\n                `,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Select Weapon`,\n                    callback: DoubleSliceCheck\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel`\n                },\n            },\n            default: \"yes\",\n        })\n        dialogEditor.render(true);\n    }else{\n        // it's exactly two weapons here\n        DoubleSliceStrike(weapons[\"0\"], weapons[\"1\"]);\n    }\n}\n\n// ------------------ helper functions ------------------\n\n//Determines if the Actor selected as the user has the requisite feat to use the ability, returns true if it does and false if it does not\nfunction CheckFeat(slug, required) {\n\n    if(token.actor.items.find(i => i.data.data.slug === slug && i.type === 'feat')){\n        return true;\n    } else if (required) {\n        ui.notifications.error('This Creature does not have the Feat required to use this ability');\n        return false;\n    }\n    return false;\n}\n\n//Creates and returns an array of all items that can be used for Hunted Shot (Ranged weapons with Reload 0)\nfunction GetWeapons(){\n    let weapons\n    \n    weapons = actor.items.filter(i => i.type === 'weapon' \n                                    && i.data.data.equipped.value === true);\n    \n    return weapons;\n}\n\n// ------------------ execution ------------------\n\n//if no token is selected, show an error\nif(!token){\n    ui.notifications.error(\"No token selected, please select the token that will use this ability\");\n}else{\n    \n    //Variable Declaration\n    \n    var targetSelected = false;\n    var targetArray = Array.from(game.user.targets);\n    \n    //if no target selected show a info notification\n    if(targetArray[0]){\n        var target = targetArray[0].actor.data;\n        targetSelected = true;\n    }else{\n        ui.notifications.info(\"Tip: You can target another creature to automatically compare your attacks to its AC\");\n    }\n\n    var weapons = GetWeapons();\n    //check if the actor has two melee weapons equipped\n    if(weapons[1]){\n        if(CheckFeat('double-slice', true)){\n            DoubleSliceUI();\n        }\n    }else{\n        ui.notifications.error(\"This actor has no weapons which meet the requirements for this ability\");\n    }\n}",
  "author": "E8D8BpwBYbRmlRfq",
  "img": "https://i.imgur.com/4GvfD0o.png",
  "actorIds": [],
  "macro-marker": {
    "icon": "icons/svg/dice-target.svg",
    "tooltip": "New Macro",
    "colour": "#ff0000",
    "trigger": ""
  }
}