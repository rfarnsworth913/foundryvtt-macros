{
  "_id": "HkFMGUur5YJB0LRg",
  "name": "Treat Wounds Macro (Improved)",
  "type": "script",
  "sort": 100001,
  "flags": {
    "core": {
      "sourceId": "Macro.f4yL0J1zpYxcsXkO"
    },
    "exportSource": {
      "world": "intotheabyss",
      "system": "pf2e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.11.3.3582"
    },
    "macro-marker": {
      "activeData": {
        "icon": "systems/pf2e/icons/spells/heal.jpg",
        "tooltip": "Treat Wounds",
        "colour": "#ff0000",
        "trigger": ""
      }
    }
  },
  "scope": "global",
  "command": "let toChat = (content, rollString) => {\n    let chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    }\n    ChatMessage.create(chatData, {})\n    if (rollString) {\n        let roll = new Roll(rollString).roll();\n        chatData = {\n            ...chatData,\n            flavor: \"Treat Wounds Healing\",\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            roll\n          }\n        ChatMessage.create(chatData, {})\n    }\n    \n}\n\nconst handleCrits = (roll) => roll === 1 ? -1 : (roll === 20 ? 1 : 0);\n\nlet rollTreatWounds = (args) => {\n    let {DC, bonus, skillMod, skillRank, name, magic, mortal, assur} = args;\n\n    const roll = new Roll(`d20`).roll().total;\n    const crit = handleCrits(roll)\n    const level = token.actor.data.data.details.level.value; \n    let total = 0;\n\n    if (assur) {\n      total = 10 + (skillRank*2+level);\n    } else {\n      total = roll + skillMod;\n    }\n\n    let message = `${name} Treats Wounds at a DC ${DC}... they roll a [[${total}]] and`;\n\n    let success = 0;\n\n    if (total >= DC+10 || (total >= DC && mortal)) {\n        success = 2;\n    } else if (total >= DC) {\n        success = 1;\n    } else if (total <= DC-10) {\n        // Fix for crit fail to match CRB 10 or less\n        success = -1;\n    }\n    if (!assur) {\n      success += crit;\n    }\n\n  if (magic){\n      if (success > 1) {\n          toChat(`${message} critically succeed!`, `32+${bonus}`);\n      } else if (success === 1) {\n          toChat(`${message} succeed.`, `16+${bonus}`);\n      } else if (success < 0) {\n          toChat(`${message} critically fail! The target takes damage.`, '1d8');\n      } else if (success === 0) {\n          toChat(`${message} fail.`);\n      }\n  } else {\n      if (success > 1) {\n          toChat(`${message} critically succeed!`, `4d8+${bonus}`);\n      } else if (success === 1) {\n          toChat(`${message} succeed.`, `2d8+${bonus}`);\n      } else if (success < 0) {\n          toChat(`${message} critically fail! The target takes damage.`, '1d8');\n      } else if (success === 0) {\n          toChat(`${message} fail.`);\n      }\n  }\n\n}\n\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Treat Wounds`,\n  content: `\n    <div>Select a target DC, remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.<div>\n    <hr/>\n    <form>\n      <div class=\"form-group\">\n        <label>Medicine DC:</label>\n        <select id=\"skill-type\" name=\"skill-type\">\n          <option value=\"Medicine\">Medicine</option>\n          <option value=\"Crafting\">Crafting</option>\n          <option value=\"Nature\">Nature</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Medicine DC:</label>\n        <select id=\"dc-type\" name=\"dc-type\">\n          <option value=\"trained\">Trained DC 15</option>\n          <option value=\"expert\">Expert DC 20, +10 Healing</option>\n          <option value=\"master\">Master DC 30, +30 Healing</option>\n          <option value=\"legendary\">Legendary DC 40, +50 Healing</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>DC Modifier:</label>\n        <input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Assurance</label>\n        <input id=\"assur\" name=\"assur\" type=\"checkbox\" value=\"assur\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Medic Dedication</label>\n        <input id=\"medicDed\" name=\"medicDed\" type=\"checkbox\" value=\"medicDed\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Magic Hands</label>\n        <input id=\"magic\" name=\"magic\" type=\"checkbox\" value=\"magic\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Mortal Healing</label>\n        <input id=\"mortal\" name=\"mortal\" type=\"checkbox\" value=\"mortal\"/>\n      </div>      \n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Treat Wounds`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        const {med} = token.actor.data.data.skills;\n        const {cra} = token.actor.data.data.skills;\n        const {nat} = token.actor.data.data.skills;\n        const {name} = token;\n        let skillUsed = html.find('[name=\"skill-type\"]')[0].value || \"Medicine\";\n        let prof = html.find('[name=\"dc-type\"]')[0].value || \"trained\";\n        let mod = parseInt(html.find('[name=\"modifier\"]')[0].value) || 0;\n        let assur = html.find('[name=\"assur\"]')[0].checked;\n        let medicDed = html.find('[name=\"medicDed\"]')[0].checked;\n        let magic = html.find('[name=\"magic\"]')[0].checked;\n        let mortal = html.find('[name=\"mortal\"]')[0].checked;\n        let medic = 0;\n        let medRank = med.rank;\n        let medMod = med.value;\n        var skillRank = 0, skillMod = 0, bogus =7;\n          \n        switch (skillUsed) {\n              case \"Medicine\":\n                skillRank = med.rank;\n                skillMod = med.value;\n                bogus = 0;\n                break;\n              case \"Crafting\":\n                skillRank = cra.rank;\n                skillMod = cra.value;\n                bogus = 1;\n                break;\n              case \"Nature\":\n                skillRank = nat.rank;\n                skillMod = nat.value;\n                bogus = 2;\n                break;\n              default:\n                skillRank = 0;\n                skillMod = 0;\n                bogus = 9;\n                break;Z\n        }\n\n        if (prof === 'legendary') {\n            if (skillRank >= 4) {\n                if (medicDed) {\n                  medic = 15;\n                }\n                return rollTreatWounds({DC: 40+mod, bonus: 50+medic, skillMod, skillRank, name, magic, mortal, assur});\n            }\n            prof = 'master';\n        } \n        if (prof === 'master') {\n            if (skillRank >= 3) {\n                if (medicDed) {\n                  medic = 10;\n                }\n                return rollTreatWounds({DC: 30+mod, bonus: 30+medic, skillMod, skillRank, name, magic, mortal, assur});\n            }\n            prof = 'expert';\n        }\n        if (prof === 'expert') {\n            if (skillRank >= 2) {\n                if (medicDed) {\n                  medic = 5;\n                }\n                return rollTreatWounds({DC: 20+mod, bonus: 10+medic, skillMod, skillRank, name, magic, mortal, assur});\n            }\n            prof = 'trained';\n        }\n        if (prof === 'trained') {\n            if (skillRank >= 1) {\n                return rollTreatWounds({DC: 15+mod, bonus: 0+medic, skillMod, skillRank, name, magic, mortal, assur});\n            }\n        }\n        //toChat(`${name} is not trained in Medicine, and doesn't know how to treat wounds!`);\n        toChat(`${name} ${skillUsed} Skill Rank: ${skillRank}, Skill Mod: ${skillMod}`);\n        return;\n      }\n    }\n  }\n}).render(true);",
  "author": "FTYrZ1lnySOkABg3",
  "img": "icons/svg/regen.svg",
  "actorIds": []
}